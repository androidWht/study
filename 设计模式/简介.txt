1 原则
* 开闭原则(Open Close Principle)
   对扩展开发，对修改关闭。
* 里氏代换原则(Liskov Substitution Principle)
   任何基类可以出现的地方，子类一定可以出现LSP是继承复用的基石，只有当派生类可以替换基类，且软件功能不收影响时，
   基类才能真正被复用，派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键
   步骤就是抽象化，里氏代换是对抽象化的具体步骤的规范。
* 依赖倒转原则 Dependence Inversion Principle
   这个原则是开闭原则的基础，针对接口编程，依赖于抽象不依赖于具体。
* 接口隔离原则 Interface Segregation Priniciple
   使用多个隔离的接口，比使用单个接口好，降低类之间的耦合度。
* 迪米特原则 Demeter Principle
   一个实体应当尽量少与其它实体发生联系，是系统功能相对独立。
* 合成复用原则 Composite Reuse Principle
   尽量使用合成/聚合的方式，而不是使用继承。

2 分类
* 创建型模式：单例，元型，工厂方法，抽象工厂，建造者。
* 结构型模式：代理，适配器，桥接，外观，享元，组合。
* 行为型模式：模板方法，策略，命令，职责链，状态，观察者，中介者，迭代器，访问者，备忘录，解释器。
