
1 java体系结构
	java虚拟机
	java语言
	java api
	class文件

2 java优点
	与平台无关性
		java程序实现了可以不需要改动而在各个软硬件平台上运行
	安全性
		java提供了受保护的运行环境，java提高了程序健壮性
	网络移动性
		java程序可以动态扩展

3 java虚拟机和java api组成java平台。java虚拟机由类加载器和执行引擎组成。
  执行引擎可以由软件实现，也可以由硬件实现。可以一次性解释字节码，或者即时编译，或者自适应优化。


4 java中有两种方法：java方法和本地方法。
	java方法是由java语言编写，编译的字节码。
	本地方法是由其它语言编写，编译生成的代码（c,c++,汇编）。

5 java类装载系统：负责装载java class文件
	启动类装载系统：由java虚拟机实现
	用户自定义装载系统：由程序使用java语言实现

6 java Class文件
	java class文件是特定格式的可以被java虚拟机执行的二进制文件。
	传统的可执行文件是首先被编译，链接成单独的支持特定硬件平台和操作系统的二进制文件。
	java可执行文件是以类型划分的java class文件集合。
	所有被装载的class文件（包括从程序中和java api中）和所有已经被装载的动态库共同组成的java虚拟机上运行的整个程序。

7 java优缺点
	优点：面向对象，多线程，结构化错误处理，垃圾收集，动态链接，动态扩展。	
	缺点：执行速度，实时性（垃圾收集器影响），安全（易反编译）


													第三章 安全性

1，java安全模型
	1.0 基本的沙箱 
	1.1 代码签名和认证
	1.2 细粒度访问控制

1.1 基本沙箱
	1 类装载器结构
	2 class文件检验器
	3 内置于java虚拟机及语言的安全特性
	4 安全管理器及Java Api

1.1.1 类装载器
 	1 防止恶意代码去干涉善意代码，守护了被信任类库的边界，将代码归入某类，确定了代码可以进行哪些操作。
	2 双亲委托机制
	3 类装载器结构  启动类装载器 - 扩展类装载器 - 系统类装载器 - 用户自定义装载器
	4 类命名空间
	5 运行时包：在同一个包内并且是由同一个类装载器装载的类型集合

1.1.2 class文件检验器
	1 和类装载器一起，class文件检查器保证装载的clss文件内容有正确的内部结构，并且这些class文件之间相互协调一致。
	2 class文件检验器在字节码执行之前要完成大部分检验
	3 class文件检验器要执行四趟独立的扫描来完成。第一次在装载时，检测class文件的内部结构，保证它可以被安全的编译。
	  第二次和第三次在连接过程中进行，确认数据类型遵循java编程语言的语义，确保字节码的完整性，第四次是在动态连接过程中
	  解析符号引用时进行的，确认被引用的类，字段，方法确实存在。
	4 第一趟：字节码结构检查。检查字节码，是否符合class文件的基本结构，魔数，class文件主版本和次版本是否被java虚拟机支持，class文件长度。
	5 第二趟：类型数据的语义检查。检查方法区数据，
	6 第三趟：字节码码流验证。
	7 第四趟：符号引用的验证。在程序真正执行到时才去验证。
	8 动态连接：将符号引用解析为直接引用的过程。
	9 动态连接过程：
		1 查找被引用的类（如果有必要的话装载）
		2 将符号引用替换为直接引用，例如指向一个类，字段或方法的指针或偏移量。
	10 二进制兼容。class文件相互引用是否兼容。

1.1.3 java虚拟机内置的安全特性
	类型安全的引用转换
	结构化的内存访问（无指针算法）
	自动垃圾收集
	数组边界检查
	空指针检查

1.1.4 安全管理器和Java API
	1,java装载器，java class文件检查器，java虚拟机内置的安全特性：保护java虚拟机实例和它运行的程序的内部资源。
	  java安全管理器和Java api是保护虚拟机外部资源。
	2 java安全管理器是可定制的
	
	
1.2 代码签名了认证
	1 非对称加密，散列算法。	
	2 加密过程：使用散列算法对jar文件进行散列，然后使用私钥对散列加密，将加密后密文添加到jar文件中，随jar包一起发布。
	3 解密过程：使用证书对密文解密，得到散列值，对jar包进行散列，与解密得到的散列值进行对比。
	4 证书制作和发布：1 使用keytool工具生成keystore文件（自签名证书） 2，使用jarsigner工具对jar文件进行签名。必须发布公钥
	
	
1.3 细粒度访问控制
	1 CodeSource代码来源、Certificate证书、Permission权限、Policy权限策略、ProtectionDomain保护域
	2 java中每个class文件都与一个CodeSource关联,CodeSource确定了代码加载的URI，证书。
	  类装载器知道所有类型的代码库和签名，利用这些信息创建CodeSource
	3 java可使用ASCII策略文件说明Policy，使用Policy来确认CodeSource所拥有的权限。
	4 每个类型都属于一个ProtectionDomain，ProtectionDomain中包含的CodeSource和Permissions,
	  在类加载时会为每个类型指定保护域。
	5 虽然Policy说明了一个CodeSource拥有的Permission，但是最终决定权限赋予的还是类加载器，类加载器具有更改权限的功能。
		
		
1.4 访问控制器（AccessController）
	1 SercurityManager是调用AccessController实现的。
	2 SercurityManager.checkPermission(Permission) -  AccessController.checkPermission(Permission)
	  检查当前线程的调用栈是否有权限执行相应操作。
	3 Permission.implies(Permission) 检查当前权限是否包含指定权限
	  PermissionCollection.implies(Permission) 检查当前权限集是否包含指定权限
	  ProtectionDomain.implies(Permission)   检查当前保护域是否包含指定权限
	4 权限检查过程：自栈顶到栈底依次检查每个栈帧，只要一个栈帧没有权限则检查失败。
    5 AccessController.doPrivileged(PrivilegedAction)给予doPriviliedged()下的栈帧特权，只检查到doPrivileged()的上一个栈帧。
	  
	  
1.5 java安全模型的不足和今后的发展
	1 不足：
		1 不断分配内存直到内存耗尽
		2 不断生成线程导致cpu资源紧张。
	2 发展 
		基于用户的权限
	
	
					
					
											第四章 网络移动性
1   java的平台无关性和安全性为网络移动带来了巨大支持
2   java的动态连接和动态扩展性。




											第五章 java虚拟机
		
1.1 java虚拟机是什么		
	1 虚拟机 是由一个规范定义的抽象计算机。
	2 java虚拟机概念: 1 一个抽象规范  2 一个具体实现 3 一个运行中的虚拟机实例
	
1.2 虚拟机的生命周期
	1java虚拟机在启动程序的时候创建，在退出程序的时候销毁。
	2当所有非守护线程都结束的时候，jvm会自动退出。如果安全管理器允许调用Runtime或System的exit()方法可以退出jvm。
	
1.3 java虚拟机的体系结构
	1 所有java虚拟机的实现都必须遵守java虚拟机规范，java虚拟机规范只规定了外部行为，没有规定其具体实现，
	  它可以通过软件实现，或者软硬件结合实现。
	2 子系统、内存区、数据类型、指令集。
		子系统：类加载子系统，负责加载及验证class文件。
		内存区：方法区，堆，java栈，pc寄存器，native栈
		数据类型：基本类型：int long short byte char float double boolean、引用类型、returnAdress
	3	方法区存储被解析后的class文件二进制类型信息。堆存储创建的类型对象。
	    java栈存储方法执行的状态信息。pc寄存器存储下一条被执行的指令。native栈存储native方法执行的状态信息。
		方法区和堆信息被所有线程共享，java栈和native栈和pc寄存器是线程私有的。
	4   java栈：指令，方法参数，返回值，局部变量，操作数栈
	5   byte 8位，带符号，二进制补码  -2^7 - 2^7-1
		short 16位 带符号，二进制补吗 -2^15 - 2^15-1
		char 16位  不带符号，Unicode字符 0 - 2^16-1
		int 32位 带符号，二进制补码 -2^31 - 2^31-1
		long 64位 带符号，二进制补码 -2^63 - 2^63-1
		float 32位 IEEE754标准单精度浮点数
		double 64位，IEEE754标准双精度浮点数
		reference：堆中某对象的应用，或者null
		boolean：由byte或者int实现
	6  java虚拟机最基本的数据单元是字(word)，大小由虚拟机的设计者决定，字长必须足够大，至少是一个字长就能容纳
		int short byte char returnAdress reference，而两个字长就能容纳long或者double。java运行时数据大部分都是基于字的
		，局部变量和操作数栈都是按照字来定义的。这些内存区域能够容纳任何虚拟机数据类型的值。它们占有一个或两个字。
	7  java类装载器分两种：启动类装载器和用户自定义类装载器，前者是java虚拟机实现的后者是java程序的一部分。
	8  类装载器执行过程：装载 - 连接 - 初始化
	   装载：查找并装载类型的二进制数据
	   连接：执行验证：确保被导入的类型的正确性
			 准备：位类变量分配内存，并将其初始化位默认值
			 解析：把类型中的符号引用转换为直接引用(可选)
	   初始化：把类变量初始化位正确的初始值。	 
		
	9   defineClass(String name,byte[] data,int offset,int length);
		加载类，指定默认保护域
		defineClass(String name,byte[] data[],int offset,int length,ProtectionDomain protectionDomain);
		加载类，指定其保护域
		findSystemClass(String name);
		调用系统加载器加载类
		resolveClass(Class cls);
		解析类型


	10  java方法区
		1、java方法区是存储被解析后的class二进制数据的逻辑区域。
		2、java虚拟机规范并没有对方法区的数据结构做任何规范，它是由java虚拟机的设计者决定的。
		3、java方法区数据被所有线程共享，必须通过线程安全的方式访问。
		4、java方法区大小可以动态调整，不必是连续的，可以在堆中自由分配，允许用户指定初始大小及最大和最小尺寸。
		5、java方法区也可以被垃圾收集器收集，可以卸载不再使用的类型。
		6、java方法区存储的数据内容：
				1 类型的全限定名
				2 类型的直接超类的全限定名(除了Object)
				3 类型的访问修饰符(public、abstract或者final的子集)
				4 任何直接超接口的全限定名的有序列表
				5 常量池
				6 字段信息
				7 方法信息
				8 静态变量
				9 一个到类ClassLoader对象的引用
				10 一个到类Class对象的引用
				11 方法表
		7、java虚拟机必须为每一个被装载的类型维护一个常量池，常量池是该类型所用常量的一个有序集合，包括直接常量(string,integer,floating,point)
		   和对其他类型，字段和方法的符号引用。池中的数据就像数组一样通过索引访问。
		8、字段信息：字段名、字段类型、字段访问修饰符(public、private、protected、static、final、volatile、transient)，声明顺序也必须保存
		9、方法信息：方法名、方法的返回类型、方法的参数数量和类型(按声明顺序)、方法的修饰符(public、private、protected、static、final、synchronized、native、abstract)	
					 、方法的字节码、操作数栈和该方法的线帧中的局部变量区的大小、异常表。
		10、编译时常量：使用final声明的并且用编译期已知的值初始化的类变量。
		11、指向ClassLoader类的引用：每一个由用户自定义类加载器加载的类型，都会在方法区存储堆该加载器的引用。
		12、指向Class类的引用：每一个被装载的类型，虚拟机都会相应的为它创建一个Class类的实例，虚拟机会将这个实例与方法区数据关联起来。
		13、java堆
				1 java堆存储所有运行时类实例和数组。一个虚拟机中只有一个堆。堆被所有线程共享
				2 java堆是可以动态收缩的，并且不必是连续的。
				3 java中对象的销毁由java虚拟机负责。java垃圾收集器负责销毁所有不再使用的对象和类型信息，负责内存碎片整理。
				4 java对象中包含的基本数据由它所属的类及所有超类声明的实例变量组成。
				5 通过对象引用，java虚拟机必须能快速访问对象实例数据和类型数据(方法区类型信息)
				6 对象数据的内部表示：
						1 一种把堆分为两部分：一个句柄池，一个对象池，对象引用就是指向句柄池的本地指针。句柄池分为两个部分，一个
						  指向对象的指针，一部分为指向方法区类型数据的指针。这种设计有利于碎片的整理，当移动对象时只需要修改句柄池的对象指针就行，	
						  缺点是每次访问对象的实例都需要经过两次指针跳转。
						2 使对象引用指向一组数据，该数据包括对象实例数据及指向方法区中的类型数据的指针。
						  这样设计的优缺点于前面相反，通过一个指针就可以访问实例数据，但当移动对象时，必须在整个运行时数据区中更新指向被移动对象的引用。
		14、方法表能加快定位实例方法，方法表是一个指针数组，指向当前类及所有父类实例方法，实例方法数据存储：操作数栈和局部变量区的大小，字节码，异常表。
		15、堆中的对象数据还有一些逻辑数据：对象锁，等待列表，垃圾收集器相关的数据。这些数据并不存储在对象中，而是通过某种方法与对象想关联。
		16、数组是真正的对象。具有相同类型和维度的数组是同一个类型。[ - 表示维度。如  int[][]可表示为[[I。
		17、程序计数器：每个线程都有自己的PC寄存器。他是在线程启动时创建的，大小为一个字长，pc寄存器总是指向下一条指令的地址(可以是本地指针、相对方法起始指令的偏移量)。
			如果线程在指向本地方法，pc寄存器值是undefined。
			


		

	
	
	
																第六章 Java Class文件
1、java class文件是对java程序二进制文件格式的精确定义。它是8位的，并且按高位在前排列。		
2、java class文件由大小不同的项组成，每项分为：类型，名称，数量。

3、			类型                名称                数量
			u4					magic				  1
			u2					minor_version		  1
			u2					major_version	      1
			u2					constant_pool_count   1
			cp_info				constant_pool		  constant_pool_count - 1
			u2					access_flags		  1
			u2					this.class			  1
			u2					super.class			  1
			u2 					interfaces_count	  1
			u2					interfaces			  interfaces_count
			u2					fields_count		  1
			field_info			fields				  fields_count
			u2					methods_count		  1
			method_info         methods				  methods_count
			u2					attributes_count	  1
			attribute_info		attributes			   attributes_count
4、magic(魔数) OXCAFEBABE,只是一个标记，用于方便区分非java class文件
5、minor_version(次版本号)  major_version(主版本号).用于确定class文件的格式，超出java虚拟机处理范围的版本将不会被处理。
   class文件的主版本号与java平台的主发布版本号保持一致，次版本号与特定平台发布版本各个发布版相关。
6、常量池包含了与文件中类和接口相关的常量，存储了诸如文字字符串，final变量值，类名和方法名常量。java虚拟机常把常量池组织为入口列表的形式。
   常量池前面是u2类型的constant_pool_count，常量池索引从1开始，0也会被constant_pool_count计数，例如如果常量池1-14，constant_pool_count = 15.
7、每个常量池入口都是从一个长度为一个字节的标志开始。
   入口类型		     	标志值				描述
   CONSTANT_Utf8 		   1				UTF-8编码的Unicode字符串
   CONSTANT_Integer		   3				int类型的字面值
   CONSTANT_Float		   4				float类型的字面值
   CONSTANT_Long		   5				long类型的字面值
   CONSTANT_Double		   6				double类型的字面值
   CONSTANT_Class		   7				对一个类或接口的符号引用
   CONSTANT_String		   8				String类型的字面值
   CONSTANT_Fieldref	   9				对一个字段的符号引用
   CONSTANT_Methodref	   10				对一个类中声明的方法的符号引用
   CONSTANT_InterfaceMethodref   11			对一个接口中声明的方法的符号引用
   CONSTANT_NameAndType	   12				对一个字段或方法的部分的符号引用
   
 8、access_flags
	标志名				值				设置后的含义					设置者
	ACC_PUBLIC			Ox0001			public类型						类和接口
	ACC_FINAL			0x0010			类为final类型					只有类
	ACC_SUPER			0x0020			使用新型的invokespecial语义		类和接口
	ACC_INTERFACE		0X200			接口类型						接口
	ACC_ABSTRACT		0x400			abstract类型					所有接口，部分类
	
9、this_class，是一个对自身CONSTANTS_Class的索引。super_class是对父类Cibstabts_Class的索引，Object的this_class = 0
10、interfaces_count：直接父接口数量，interfaces：直接父接口数组，存储的是常量池CONSTANTS_Class_Info的索引。
11、fields_count和fields。是对该类和接口声明的字段的描述，不包含父类或父接口中定义的字段，虚拟机可能添加字段(例如内部类添加对外部类的引用)。
	fields_count表明字段的数量，fields是field_info表信息(字段的名字，描述符和修饰符)
12、methods_count和methods。对该类或接口中所声明的方法的描述。不包含从父类继承下来的方法。
	methods_count表明方法数量，methods是methods_info表信息(方法名称，方法描述符，栈空间长度，异常表，字节码序列以及可选的行数和局部变量)
13、attributes_count和attributes。描述了该文件中类或接口所定义的属性的基本信息。attributes_count表明属性数量，attributes是attribute_info表信息
	java虚拟机定义了几种属性，用户也可以自定义属性，java虚拟机会忽视任何不能识别的属性。
14、常量池中容纳的符号引用包括三种特殊的字符：全限定名，简单名称，描述符。
	字段符号引用：全限定名、简单字段名、字段描述符(字段类型名)
	方法符号引用：全限定名、简单方法名、方法描述符(返回类型，参数数量，参数类型，参数顺序)
	
	
	
	
	
	
	
	
	
													第七章 类型的生命周期
1、类型的装载 、连接、初始化、对象的创建、垃圾收集、对象的总结、类型的卸载。
2、类型的装载必须严格按照顺序进行：
	1类型的装载：把二进制的java类型读取到java虚拟机中
	2类型的连接：将已读入的二进制数据合并到java虚拟机的运行时状态中去。(验证 - 准备 - 解析)
	3类型的初始化：为该类型分配内存。
3、	java虚拟机规范在类型的装载和连接给了一定的灵活性，但严格限制的类型初始化的时机，必须在类型首次被主动使用时初始化。
	1 创建类型实例时(new、反射、克隆、反序列化)
	2 调用类型的静态方法
	3 使用类型的静态字段(编译时常量除外)
	4 使用类型的反射
	5 虚拟机启动时被标记为启动类的类(即含有main方法的类)
	6 初始化某个类型的子类时。
	这六种情况是主动使用，其它情况都是被动使用，都不会去初始化类型。
4、装载：1 通过该类型的全限定名，产生一个代表该类型的二进制数据流。
		 2 解析这个二进制数据流为方法区内部的数据结构。
		 3 创建一个表示该类型的Class类型的实例。
	如果类型在装载时出现异常，并不会立刻报告错误，而是在类型被主动使用时抛出异常LinkageError。
	在类型被装载之前要确保其所有的父类和父接口都已经被装载。
5、	验证。检查被装载类型的正确性都属于验证。可能发生在装载过程，也可能发生在解析过程中。java虚拟机规范严格规定了所有任何可能的验证错误。
    装载验证：检查魔数，确保每一部分都在正确的位置，拥有正确的长度，确保除Object外都有超类。
	解析验证：确保符号引用确实存在，确保有访问权限。
	正式验证：检查final类不能拥有子类。
			  检查final方法不能被覆盖。
			  确保类型和超类型之间没有不兼容的方法声明。
			  检查所有确保类型和超类型之间没有不兼容的方法声明。
			  检查所有检查所有确保类型和超类型之间没有不兼容的方法声明。
			  检查所有常量池入口相互之间一致。(比如CONSTANT_String_info入口的string_index项目必须是一个CONSTANT_Utf8_info入口索引)
			  检查常量池中所有特殊字符串是否符合格式(类名，字段名，方法名，字段描述符，方法描述符)
			  检查字节码的完整性(最复杂的任务)
6、准备。为类变量分配内存，并设置默认值。在准备阶段实现也可能为一些数据结构分配内存，目的是提高运行程序的性能(如方法表)
7、解析。在常量池中查找符号引用替换成直接引用。
8、初始化。为类变量赋予正确的初始值。它是由程序通过初始化语句或者静态初始化块语句给出的。所有初始化语句和初始化块都被java编译期收集到
		   一个特殊的方法<cinit>中，次方法只能被java虚拟机调用。初始化先从父类开始，初始化子类时必须确保父类已经被初始化。初始化必须确保线程安全。
9、编译时常量：被final修饰的并且使用编译时可知的值初始化的类变量。编译时常量不会被编译成字段，它们被编译期特殊处理，嵌入字节码流中或者常量池中。
10、主动使用和被动使用。 使用一个非常量的静态字段只有当类或者接口的确声明了这个字段时才算主动使用。 
11、对象的生命周期。
		1对象的创建
			1 显示创建：new操作符，Class.newInstance(),Object.clone,ObjectInputStream.readObj()
			2 隐式创建：main方法中的String[],Class对象，CONSTANT_String_info，字符串拼接。
		2对象的初始化。所有的类型都有至少有一个<init>，<init>中的异常不能被捕获。
			1 调用<init>方法初始化
			2 复制赋值(clone)
			3 反序列化赋值
		3垃圾收集和对象的终结
			1 java中程序只能创建对象不能销毁对象，对象的销毁由jvm的垃圾收集器完成。
			2 每个类型中都定义有终结方法finalize(),在对象被销毁之前，finalize()方法会被调用，finalize()方法只能被调用偶从
			  ，在运行finalize()时，对象可能被重新引用。finalize()可能被任意线程调用。
11、类型的卸载
		1 启动类装载器装载的类永远都不会卸载，只有用户自定义的类装载器装载的类才会被卸载。
		2 当一个类型不再可触及时就会被卸载。可触及性：对Class有引用，在堆中存在一个可触及的对象其方法区数据指向Class对象。
		
		
		
		
		
		
													第八章 连接模型
1 java编译器会为每个类和接口编译成一个独立的class二进制文件，它们通过符号引用相互关联，在运行时相互连接。
2 每个被装载的类型jvm都会在方法区为其维护一份常量池，叫做运行时常量池，类型中所以的符合引用都存储在常量池中。
  解析过程是将符号引用转换为直接引用的过程，所以也叫常量池解析。
3 可以通过两种方式来动态扩展类型：
	1 使用Class.forName(String name);默认会连接和初始化
	2 使用ClassLoader.loadClass(String name);连接和初始化由虚拟机决定
	













													第二十章 java同步
1												





























	
													
															
	
	
 	
			