* java虚拟机里面的异常使用Throwable或其子类的实例来表示，抛出异常的本质实际上是程序控制权的一种即时的非局部的转换。
* 绝大多数异常的产生都是由于当前线程执行的某一个操作所导致的，这种可以称为同步异常。与之相对的，异步异常可以在程序执行过程中随时发生。
* 1 athrow字节码指令执行
   2 虚拟机同步检测到程序发生了非正常的执行情况，这是异常必将紧接着在发生异常的字节码之后抛出，而不会在执行过程中随时抛出。
   3 java虚拟机实现发生了内部错误(异步异常)
* java虚拟机规范允许在异步异常抛出之前额外执行一段有限的代码，使得代码优化器能够在不违反java语言语义的前提下检测并把这些异常在可处理它们的地方抛出。
* 抛出异常的动作在java虚拟机之中是有精确的定义的，当异常抛出，程序控制权发生转移的那一刻，所有在异常抛出的位置之前的字节码指令所产生的影响都应当是
  可以观察到的，而在异常抛出位置之后的字节码指令，则不应当产生执行效果。如果虚拟机执行的代码是优化后的代码，有一些在异常出现位置之后的代码可能已经执行了，
  那些优化过的代码必须保证被它们提前执行所产生的影响对应用程序来说是不可见的。
* 由java虚拟机执行的每个方法都会配有零个或多个异常处理器(exception handler)，异常处理器描述了其在方法代码中的有效作用范围(通过字节码偏移量范围来描述)
   能处理的异常类型以及处理异常的代码所在的位置。
* 要判断某个异常处理器是否可以处理某个具体的异常，需要同时检查异常出现的位置是否在异常处理的有效作用范围内，以及出现的异常是否是异常处理器声明可以处理的异常及其子类型。
* 当抛出异常时，java虚拟机搜索当前方法包含的各个异常处理器，如果能够找到可以处理该异常的异常处理器，则将代码控制权转向处理异常的分支之中。
* 如果当前方法没有相应的异常处理器，当前方法出栈，返回到调用者方法重新抛出异常，在整个线程调用链中重新执行这个过程，如果没有找到相应处理器，线程将被终止。
* 异常处理器搜索顺序是Java虚拟机按照class文件中的异常处理器表所描述的异常处理器的先后顺序，从前至后进行搜索。
*finally子块