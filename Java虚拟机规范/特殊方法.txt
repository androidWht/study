1 构造器
* java编程语言中的构造器是以一个名为<init>的特殊实例初始化方法的形式出现的。
*<init>这个方法名称是由编译器命名的，它并不是一个合法的java方法，不可能通过程序编码实现。
* 实例初始化方法只能在实例的初始化期间，通过java虚拟机的invokespecial指令来调用，而且只能在尚未初始化的实例上调用该指令。
* 构造器的访问权限也会约束该构造器所衍生出来的实例初始化方法。

2 类或接口的初始化方
* 一个类或者接口最多可以包含不超过一个初始化方法，类或接口就是通过这个方法完成初始化的。
* 这个方法是一个不包含参数，返回类型位void的方法，名为<clinit>
* <clinit>这个名字是由编译器命名的，它并非一个合法的java方法名字，不能通过java程序编码实现。
* 类或接口的初始化方法由java虚拟机自身隐式调用，没有任何虚拟机指令可以调用这个方法，它只会在类的初始化阶段中由虚拟机自身调用
* 当class文件的版本不小于51.0时，<clinit>方法想要成为类或接口的初始化方法，必须设置ACC_TSTATIC标志。

3 签名多态性(signature polymorphic)
* 1 在java.lang.invoke,MethodHandle类声明
   2 只有一个类型为Object[]的形参，返回值为Object
   3 ACC_VARARGS和ACC_NATIVE标志被设置
* 在java SE 8中，只有java.lang.invoke.MethodHandle的invoke和invokeExact是签名多态性方法。
* invokevirtual指令，将对具有签名多态性的方法进行特殊处理，以保证方法句柄能够正常调用。
* 方法句柄是一种可以直接运行的强类型引用，它可以指向相关的方法，构造器，字段货期其它低级操作，并且具有参数或返回值转换能力。