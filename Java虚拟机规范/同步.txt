1 同步
* java虚拟机的同步(synchronization)使用monitor的进入和退出来实现的。无论是显示同步还是隐式同步。
* 同步代码块是使用monitorenter和monitorexit指令来实现的
* 同步方法时由调用指令读取运行时常量池中方法ACC_SYNCHRONAZED标志来隐式实现的。
  如果设置了同步，执行线程先持有同步锁，然后执行方法，最后在方法完成时释放同步锁。
* 在方法执行期间，执行线程持有了同步锁，其它任何线程都无法再获得同一个锁，如果同步方法抛出了异常，并且在方法内部无法处理异常，
   那么这个同步方法所持有的锁将在异常被抛到同步方法之外时自动释放。
* 编译器必须确保无论方法以何种方式完成。方法中调用过的每条monitorenter指令必须有对应的monitorexit指令得到执行，不管这个方法时正常结束还是异常结束。
* 结构化锁定(structued locking)是指在方法调用期间一个同步锁退出都与前面的同步锁进入想匹配的情形。
  因为无法保证所有提交给java虚拟机执行的代码都满足结构化锁定，所以java虚拟机允许通过以下两条规则来保证结构化锁定成立。
  1 T在方法执行时持有的同步锁M的次数必须与T在方法执行完成时释放锁的次数相同。
  2 在方法调用过程中，任何时刻都不会出现线程T释放M次数比持有M的次数多。
* 为了保证在方法异常完成时，monitorenter和monitorexit指令依然可以正确配对执行，编译器会自动产生一个异常处理器
   这个异常处理器宣称自己可以处理所有异常，它的代码用来执行monitorexit。