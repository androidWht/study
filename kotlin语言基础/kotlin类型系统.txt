1 类型的定义
* 类型就会数据的分类，决定了该类型的可能的值，以及该类型的值可以完成的操作。

2 运算符
* 安全调用运算符?. 把null检查和一个操作合并。
* Elvis运算符?:  接受两个运算数，如果第一个不为null则返回第一个运算数，否则返回第二个运算数。
  如果两个运算符类型不同，编译器会推导返回合适的类型。
* 安全类型转换运算符 as?  将对象转为指定的类型如果无法转换则返回null。
* 非空断言!! 对可控类型对象做非空断言，如果为null则抛出异常。

3 延迟初始化属性。
* 使用以lateinit关键词修饰var不可空属性，声明成可以延迟初始化。

4 可空类型扩展
* 可以定义可空类型的扩展函数。无需判null直接调用。

5 类型参数的可空性
* kotlin中所有泛型和泛型函数的类型参数都是可空的。任何类型，包括可空类型在内，都可以替换类型参数。
* 要指定类型参数非空，必须要为它指定一个非空的上界。

6 可空性和Java
* java类型会变成kotlin中的平台类型。平台类型本质是kotlin不知道可空信息的类型。既可以当做可空也可以当做非空。
  意味着你在这个类型上做的操作负有全部责任，编译器将允许所有操作。
* kotlin公开的函数。编译器会生成对每个非空类型的参数的检查。
* 将java变量赋值给kotlin非空变量会执行非空检查。
* 在kotlin中重写java的方法，可以选择可空或不可空。要特别注意把参数定为不可空时，java中时候会使用可空参数调用。

8 基本数据类型
* kotlin不区分基本数据类型和引用类型。
* 编译器将kotlin的基本类型编译成java的基本类型或者其包装类。
* java的基本类型被当做kotlin中的非空类型。
* kotlin中的可空类型被编译成java的包装类型。
* kotlin不会自动执行数值类型转换。它提供了众多方法实现数值类型转换。

9 Any和Any?
* 在kotlin中Any类型是所有非空类型的超类型，Any?类型是所有可空类型的超类型。
* Any被编译成java的Obejct类。
* Any类只包含 toString，equals，hashCode方法。不能使用Any调用Object的其它方法，

10 Unit类型：Kotlin中的void
11 Noting类型：代表一个不存在的值，只有被当做函数的返回值或者泛型函数的返回值的类型参数才有意义。

