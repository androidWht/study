1 命名参数
* 当调用一个kotlin定义的函数时，可以显示地标明一些参数的名称。
   如果在调用一个函数时，指明了一个参数的名称，为了避免混淆，后面的所有参数都要标明名称。
* 当调用java函数时，不能采用命名参数，不管是jdk中的函数还是Android框架的函数。
   把参数名称存到.class文件是Java8及更高版本的一个可选功能。而kotlin需要与java6保持兼容。

2 默认参数
* kotlin在声明函数的时候，指定参数的默认值，可以避免创建重载函数。
* 当使用常规的调用语法时，必须按照函数声明中定义的参数顺序来给定参数。可以省略的只有排在末尾的参数。如果使用参数命名可以使用任何顺序。
* 参数的默认值是被编码到被调用的函数中，而不是调用的地方。如果你改变了参数的默认值并重新编译，调用者将会使用新的默认值。
* java没有参数默认值的概念。在java中调用kotlin函数时，必须显示指定所有参数值。使用@JvmOverloads注解会生成重载函数。
* 实现原理
  实现了默认参数的方法或构造器，编译器都会生成一个重载的函数。多出两个参数。
  函数 - int mask，Object obj。
  构造器 - int mask ,DefaultConstructorMarker obj
  mask是与参数位置相关的标签。标记参数是否使用了默认值。obj用于具有默认参数的重载问题(保留使用)
  
3 顶层函数
* kotlin可以直接在代码文件的顶层定义函数。顶层函数不属于类
* 在包外访问需要import，直接可以通过方法名调用。
* 顶层函数会被编译成静态函数。kotlin编译生成的类的名称对应于包含函数的文件的名称。可以使用@JvmName注解重命名类名。

4 顶层属性
* kotlin可以在文件的顶层定义属性。
* 在包外访问需要import，通过属性名直接访问。
* 顶层属性被编译成一个静态的字段。
* 默认情况下，顶层属性和其它的属性一样，通过访问器访问。使用const修饰会变成一个常量。

5 扩展函数
*  扩展函数是一个类的成员函数，定义在类外部，可以通过类对象直接访问。
* 扩展函数是使用静态函数实现的，调用对象作为第一个参数。
* 扩展函数不允许打破类的封装性，只能访问类的公开成员。
* 扩展函数使用前必须导入。如果导入命名冲突可以使用as重命名。
* 和顶层函数一样，被编译成静态函数的扩展函数被包含在使用其声明的文件的文件名创建的类中。java调用顶层函数和调用普通静态函数一样。
* 扩展函数也支持泛型。其接受者是一个具体的类型而不是类。
* 父类和子类定义相同签名的扩展函数时，是根据静态类型决定所调用的方法，而不是运行时类型。
* 当存在扩展函数和成员函数签名相同时，调用的是成员函数。

6 扩展属性
* 使用属性的访问方法来扩展类的API。
* 扩展属性并不是一个真正的属性，它没有存储位置。
* 扩展属性必须定义getter函数，不能被初始化。

7 局部函数
* 可以在函数内部定义函数，称为局部函数。
* 局部函数可以是扩展函数。





